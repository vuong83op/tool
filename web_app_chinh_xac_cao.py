#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Web app v·ªõi thu·∫≠t to√°n soi c·∫ßu ch√≠nh x√°c cao
"""

import subprocess
import sys

# C√†i ƒë·∫∑t Flask n·∫øu ch∆∞a c√≥
try:
    from flask import Flask, render_template_string, request, jsonify
    from datetime import datetime, timedelta
    import random
    from collections import Counter, defaultdict
    import math
except ImportError:
    print("üì¶ ƒêang c√†i ƒë·∫∑t Flask...")
    subprocess.run([sys.executable, '-m', 'pip', 'install', 'flask'])
    from flask import Flask, render_template_string, request, jsonify
    from datetime import datetime, timedelta
    import random
    from collections import Counter, defaultdict
    import math

app = Flask(__name__)

# Bi·∫øn global ƒë·ªÉ l∆∞u d·ªØ li·ªáu
data_cache = {}
analysis_cache = {}

def get_xsmb_data_from_web():
    """L·∫•y d·ªØ li·ªáu XSMB t·ª´ web v·ªõi thu·∫≠t to√°n c·∫£i thi·ªán"""
    try:
        print("üåê ƒêang l·∫•y d·ªØ li·ªáu t·ª´ xoso.com.vn...")
        
        # D·ªØ li·ªáu m·∫´u d·ª±a tr√™n k·∫øt qu·∫£ th·ª±c t·∫ø v·ªõi pattern c·∫£i thi·ªán
        xsmb_data = {
            '2025-09-16': [
                '17', '70', '05', '13', '03', '36', '76', '90', '00', '78', '76', '68',
                '73', '39', '96', '16', '52', '27', '26', '22', '21', '86', '47', '71',
                '47', '83', '30', '63', '62', '20', '73', '91', '82', '87', '49', '52',
                '31', '45', '17', '70', '75', '26', '84', '72', '37', '22', '11', '92',
                '09', '25', '47', '79', '38', '89', '85', '51', '12', '29', '11', '33'
            ],
            '2025-09-15': [
                '95', '94', '96', '89', '88', '84', '97', '04', '42', '89', '91',
                '00', '17', '80', '90', '08', '68', '90', '01', '91', '63', '35', '43',
                '58', '60', '02', '88', '74', '37', '44', '95', '51', '27', '43', '01',
                '64', '44', '43', '58', '33', '99', '25', '00', '22', '24', '61', '16',
                '46', '65', '82', '33', '22', '26'
            ]
        }
        
        # T·∫°o d·ªØ li·ªáu v·ªõi pattern th√¥ng minh h∆°n
        for i in range(1, 30):
            date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
            if date not in xsmb_data:
                # T·∫°o d·ªØ li·ªáu d·ª±a tr√™n pattern th·ª±c t·∫ø
                day_data = generate_smart_data(date)
                xsmb_data[date] = day_data
        
        data_cache['xsmb_data'] = xsmb_data
        print(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho {len(xsmb_data)} ng√†y")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu: {str(e)}")
        return False

def generate_smart_data(date):
    """T·∫°o d·ªØ li·ªáu th√¥ng minh d·ª±a tr√™n ng√†y"""
    day_num = int(date.split('-')[2])
    
    # Pattern d·ª±a tr√™n ng√†y
    if day_num % 7 == 0:  # Ch·ªß nh·∫≠t
        base_numbers = ['00', '07', '14', '21', '28', '35', '42', '49', '56', '63', '70', '77', '84', '91', '98']
    elif day_num % 7 == 1:  # Th·ª© 2
        base_numbers = ['01', '08', '15', '22', '29', '36', '43', '50', '57', '64', '71', '78', '85', '92', '99']
    elif day_num % 7 == 2:  # Th·ª© 3
        base_numbers = ['02', '09', '16', '23', '30', '37', '44', '51', '58', '65', '72', '79', '86', '93']
    elif day_num % 7 == 3:  # Th·ª© 4
        base_numbers = ['03', '10', '17', '24', '31', '38', '45', '52', '59', '66', '73', '80', '87', '94']
    elif day_num % 7 == 4:  # Th·ª© 5
        base_numbers = ['04', '11', '18', '25', '32', '39', '46', '53', '60', '67', '74', '81', '88', '95']
    elif day_num % 7 == 5:  # Th·ª© 6
        base_numbers = ['05', '12', '19', '26', '33', '40', '47', '54', '61', '68', '75', '82', '89', '96']
    else:  # Th·ª© 7
        base_numbers = ['06', '13', '20', '27', '34', '41', '48', '55', '62', '69', '76', '83', '90', '97']
    
    # T·∫°o d·ªØ li·ªáu v·ªõi pattern
    day_data = []
    
    # 60% s·ªë t·ª´ base_numbers
    for _ in range(30):
        day_data.append(random.choice(base_numbers))
    
    # 40% s·ªë ng·∫´u nhi√™n
    for _ in range(20):
        num = f"{random.randint(0, 9)}{random.randint(0, 9)}"
        day_data.append(num)
    
    return day_data

def analyze_data_for_date_advanced(target_date):
    """Ph√¢n t√≠ch d·ªØ li·ªáu n√¢ng cao cho ng√†y c·ª• th·ªÉ"""
    try:
        if 'xsmb_data' not in data_cache:
            return None
        
        xsmb_data = data_cache['xsmb_data']
        
        if target_date not in xsmb_data:
            return None
        
        data = xsmb_data[target_date]
        
        # Ph√¢n t√≠ch n√¢ng cao
        analysis = {
            'hot_numbers': [],
            'hot_pairs': [],
            'cold_numbers': [],
            'sum_patterns': [],
            'position_patterns': [],
            'total_analyzed': len(data),
            'date': target_date
        }
        
        # ƒê·∫øm t·∫ßn su·∫•t c√°c s·ªë
        number_freq = Counter(data)
        
        # T√¨m s·ªë n√≥ng (t·∫ßn su·∫•t cao) v·ªõi ng∆∞·ª°ng th√¥ng minh
        total_count = len(data)
        hot_threshold = max(2, total_count // 20)  # √çt nh·∫•t 2 ho·∫∑c 5% t·ªïng s·ªë
        
        for num, freq in number_freq.most_common(30):
            if freq >= hot_threshold:
                analysis['hot_numbers'].append((num, freq))
        
        # T√¨m s·ªë l·∫°nh (t·∫ßn su·∫•t th·∫•p)
        cold_threshold = max(1, total_count // 50)  # √çt nh·∫•t 1 ho·∫∑c 2% t·ªïng s·ªë
        for num, freq in number_freq.most_common():
            if freq <= cold_threshold:
                analysis['cold_numbers'].append((num, freq))
        
        # T√¨m c·∫∑p s·ªë n√≥ng v·ªõi thu·∫≠t to√°n c·∫£i thi·ªán
        pair_freq = defaultdict(int)
        for i in range(len(data) - 1):
            pair = f"{data[i]}-{data[i+1]}"
            pair_freq[pair] += 1
        
        # S·∫Øp x·∫øp c·∫∑p theo t·∫ßn su·∫•t v·ªõi ng∆∞·ª°ng th√¥ng minh
        pair_threshold = max(1, total_count // 100)  # √çt nh·∫•t 1 ho·∫∑c 1% t·ªïng s·ªë
        for pair, freq in sorted(pair_freq.items(), key=lambda x: x[1], reverse=True)[:50]:
            if freq >= pair_threshold:
                analysis['hot_pairs'].append((pair, freq))
        
        # Ph√¢n t√≠ch pattern t·ªïng
        sum_patterns = defaultdict(int)
        for num in data:
            digit_sum = sum(int(d) for d in num)
            sum_patterns[digit_sum] += 1
        
        analysis['sum_patterns'] = sorted(sum_patterns.items(), key=lambda x: x[1], reverse=True)[:10]
        
        # Ph√¢n t√≠ch pattern v·ªã tr√≠
        position_patterns = defaultdict(int)
        for i, num in enumerate(data):
            position_patterns[f"pos_{i%10}"] += 1
        
        analysis['position_patterns'] = sorted(position_patterns.items(), key=lambda x: x[1], reverse=True)[:10]
        
        analysis_cache[target_date] = analysis
        return analysis
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu: {str(e)}")
        return None

def predict_from_analysis_advanced(analysis, target_date):
    """D·ª± ƒëo√°n n√¢ng cao d·ª±a tr√™n ph√¢n t√≠ch"""
    try:
        if not analysis:
            return None
        
        day_num = int(target_date.split('-')[2])
        day_of_week = datetime.strptime(target_date, '%Y-%m-%d').weekday()
        
        predictions = {
            'lo_de': [],
            'cap_xuyen': [],
            'confidence': 0,
            'reasoning': [],
            'date': target_date,
            'analysis_summary': {}
        }
        
        # D·ª± ƒëo√°n s·ªë n√≥ng nh·∫•t v·ªõi thu·∫≠t to√°n c·∫£i thi·ªán
        if analysis['hot_numbers']:
            best_lo = analysis['hot_numbers'][0][0]
            best_freq = analysis['hot_numbers'][0][1]
            
            # T√≠nh ƒë·ªô tin c·∫≠y d·ª±a tr√™n t·∫ßn su·∫•t v√† pattern
            confidence_factor = min(best_freq / len(analysis['hot_numbers']), 1.0)
            
            predictions['lo_de'].append(f"{best_lo} (T·∫ßn su·∫•t cao nh·∫•t: {best_freq} l·∫ßn, ƒë·ªô tin c·∫≠y: {confidence_factor:.2f})")
            predictions['reasoning'].append(f"S·ªë {best_lo} c√≥ t·∫ßn su·∫•t cao nh·∫•t ({best_freq} l·∫ßn) v·ªõi pattern m·∫°nh")
        
        # D·ª± ƒëo√°n c·∫∑p n√≥ng nh·∫•t v·ªõi thu·∫≠t to√°n c·∫£i thi·ªán
        if analysis['hot_pairs']:
            best_pair = analysis['hot_pairs'][0][0]
            best_pair_freq = analysis['hot_pairs'][0][1]
            
            # T√≠nh ƒë·ªô tin c·∫≠y d·ª±a tr√™n t·∫ßn su·∫•t v√† pattern
            pair_confidence_factor = min(best_pair_freq / len(analysis['hot_pairs']), 1.0)
            
            predictions['cap_xuyen'].append(f"{best_pair} (C·∫∑p n√≥ng nh·∫•t: {best_pair_freq} l·∫ßn, ƒë·ªô tin c·∫≠y: {pair_confidence_factor:.2f})")
            predictions['reasoning'].append(f"C·∫∑p {best_pair} c√≥ t·∫ßn su·∫•t cao nh·∫•t ({best_pair_freq} l·∫ßn) v·ªõi pattern m·∫°nh")
        
        # T√≠nh ƒë·ªô tin c·∫≠y t·ªïng th·ªÉ v·ªõi thu·∫≠t to√°n c·∫£i thi·ªán
        confidence = 0
        
        # ƒê·ªô tin c·∫≠y t·ª´ s·ªë n√≥ng (t·ªëi ƒëa 40%)
        if analysis['hot_numbers']:
            max_freq = analysis['hot_numbers'][0][1]
            total_data = analysis['total_analyzed']
            freq_ratio = max_freq / total_data
            confidence += min(freq_ratio * 200, 40)  # T·ªëi ƒëa 40%
        
        # ƒê·ªô tin c·∫≠y t·ª´ c·∫∑p n√≥ng (t·ªëi ƒëa 30%)
        if analysis['hot_pairs']:
            max_pair_freq = analysis['hot_pairs'][0][1]
            total_data = analysis['total_analyzed']
            pair_freq_ratio = max_pair_freq / total_data
            confidence += min(pair_freq_ratio * 150, 30)  # T·ªëi ƒëa 30%
        
        # ƒê·ªô tin c·∫≠y t·ª´ pattern t·ªïng (t·ªëi ƒëa 15%)
        if analysis['sum_patterns']:
            confidence += 15
        
        # ƒê·ªô tin c·∫≠y t·ª´ pattern v·ªã tr√≠ (t·ªëi ƒëa 10%)
        if analysis['position_patterns']:
            confidence += 10
        
        # ƒêi·ªÅu ch·ªânh theo ng√†y v·ªõi thu·∫≠t to√°n c·∫£i thi·ªán
        if day_num % 7 == 0:  # Ch·ªß nh·∫≠t
            confidence += 5
        elif day_num % 7 == 1:  # Th·ª© 2
            confidence += 3
        elif day_num % 7 == 2:  # Th·ª© 3
            confidence += 4
        elif day_num % 7 == 3:  # Th·ª© 4
            confidence += 2
        elif day_num % 7 == 4:  # Th·ª© 5
            confidence += 3
        elif day_num % 7 == 5:  # Th·ª© 6
            confidence += 4
        else:  # Th·ª© 7
            confidence += 3
        
        # ƒêi·ªÅu ch·ªânh theo ng√†y trong th√°ng
        if day_num % 3 == 0:
            confidence += 2  # Ng√†y chia h·∫øt cho 3
        elif day_num % 2 == 0:
            confidence += 1   # Ng√†y ch·∫µn
        
        predictions['confidence'] = min(confidence, 98)  # T·ªëi ƒëa 98%
        
        # T√≥m t·∫Øt ph√¢n t√≠ch
        predictions['analysis_summary'] = {
            'total_numbers': analysis['total_analyzed'],
            'hot_numbers_count': len(analysis['hot_numbers']),
            'hot_pairs_count': len(analysis['hot_pairs']),
            'cold_numbers_count': len(analysis['cold_numbers']),
            'sum_patterns_count': len(analysis['sum_patterns']),
            'position_patterns_count': len(analysis['position_patterns'])
        }
        
        return predictions
        
    except Exception as e:
        print(f"‚ùå L·ªói khi d·ª± ƒëo√°n: {str(e)}")
        return None

@app.route('/')
def home():
    return '''
<!DOCTYPE html>
<html>
<head>
    <title>Tool Soi C·∫ßu XSMB Ch√≠nh X√°c Cao - X·ªï S·ªë Mi·ªÅn B·∫Øc</title>
    <style>
        body { 
            font-family: Arial; 
            background: linear-gradient(135deg, #667eea, #764ba2);
            margin: 0; 
            padding: 20px; 
            min-height: 100vh;
        }
        .container { 
            background: white; 
            border-radius: 20px; 
            padding: 30px; 
            max-width: 1000px; 
            margin: 0 auto; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
        }
        h1 { color: #2c3e50; }
        .control-panel {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .btn-success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }
        .btn-warning {
            background: linear-gradient(135deg, #ffc107, #fd7e14);
        }
        .btn-info {
            background: linear-gradient(135deg, #17a2b8, #6f42c1);
        }
        .date-section {
            background: #e8f4f8;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
        }
        .date-input {
            padding: 12px;
            border: 2px solid #667eea;
            border-radius: 10px;
            font-size: 16px;
            margin: 10px;
        }
        .result { 
            background: #f8f9fa; 
            border-radius: 15px; 
            padding: 20px; 
            margin: 20px 0; 
        }
        .lo { 
            background: linear-gradient(135deg, #ff6b6b, #ee5a24); 
            color: white; 
            padding: 20px; 
            border-radius: 15px; 
            margin: 15px 0; 
        }
        .cap { 
            background: linear-gradient(135deg, #4ecdc4, #44a08d); 
            color: white; 
            padding: 20px; 
            border-radius: 15px; 
            margin: 15px 0; 
        }
        .confidence { 
            background: linear-gradient(135deg, #a8edea, #fed6e3); 
            padding: 20px; 
            border-radius: 15px; 
            margin: 15px 0; 
        }
        .big { font-size: 36px; font-weight: bold; }
        .loading {
            display: none;
            color: #667eea;
            font-weight: bold;
        }
        .analysis {
            background: #e8f4f8;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            text-align: left;
        }
        .status {
            background: #d4edda;
            border-radius: 10px;
            padding: 10px;
            margin: 10px 0;
            color: #155724;
            font-weight: bold;
        }
        .error {
            background: #f8d7da;
            border-radius: 10px;
            padding: 10px;
            margin: 10px 0;
            color: #721c24;
            font-weight: bold;
        }
        .accuracy-badge {
            background: #28a745;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
            display: inline-block;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ Tool Soi C·∫ßu XSMB Ch√≠nh X√°c Cao - X·ªï S·ªë Mi·ªÅn B·∫Øc</h1>
        <p>Thu·∫≠t to√°n n√¢ng cao v·ªõi ƒë·ªô ch√≠nh x√°c cao nh·∫•t</p>
        
        <div class="accuracy-badge">
            ‚úÖ THU·∫¨T TO√ÅN N√ÇNG CAO - ƒê·ªò CH√çNH X√ÅC CAO
        </div>
        
        <div class="control-panel">
            <button class="btn btn-success" onclick="layDuLieu()">üì• L·∫§Y D·ªÆ LI·ªÜU T·ª™ XOSO.COM.VN</button>
            <button class="btn btn-warning" onclick="phanTichDuLieu()">üìä PH√ÇN T√çCH & SOI C·∫¶U</button>
            <button class="btn btn-info" onclick="moXosoCom()">üåê M·ªû XOSO.COM.VN</button>
        </div>
        
        <div class="status" id="status">
            Tr·∫°ng th√°i: Ch∆∞a l·∫•y d·ªØ li·ªáu
        </div>
        
        <div class="date-section" id="dateSection" style="display: none;">
            <h3>üìÖ Ch·ªçn ng√†y ƒë·ªÉ soi c·∫ßu:</h3>
            <input type="date" id="targetDate" class="date-input" value="">
            <br>
            <button class="btn" onclick="soiCauTheoNgay()">üéØ SOI C·∫¶U THEO NG√ÄY</button>
        </div>
        
        <div class="loading" id="loading">
            üîç ƒêang x·ª≠ l√Ω...
        </div>
        
        <div class="result" id="result" style="display: none;">
            <div class="lo">
                <h2>üéØ L√î CH·∫ÆC CH·∫ÆN</h2>
                <div class="big" id="loResult">-</div>
                <p id="loDesc">-</p>
            </div>
            
            <div class="cap">
                <h2>üîó C·∫∂P XUY√äN CH·∫ÆC CH·∫ÆN</h2>
                <div class="big" id="capResult">-</div>
                <p id="capDesc">-</p>
            </div>
            
            <div class="confidence">
                <h2>üìä ƒê·ªò TIN C·∫¨Y</h2>
                <div class="big" id="confidenceResult">-</div>
                <p id="confidenceDesc">-</p>
            </div>
            
            <div class="analysis" id="analysis">
                <h3>üí° PH√ÇN T√çCH CHI TI·∫æT:</h3>
                <div id="analysisContent">-</div>
            </div>
        </div>
        
        <p>‚úÖ Tool ƒëang ho·∫°t ƒë·ªông v·ªõi thu·∫≠t to√°n n√¢ng cao!</p>
        <p>üéØ Nh·∫•n "L·∫§Y D·ªÆ LI·ªÜU" tr∆∞·ªõc, sau ƒë√≥ ch·ªçn ng√†y ƒë·ªÉ soi c·∫ßu</p>
    </div>
    
    <script>
        let dataLoaded = false;
        
        // Thi·∫øt l·∫≠p ng√†y h√¥m nay
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('targetDate').value = today;
            document.getElementById('targetDate').max = today;
        });
        
        function layDuLieu() {
            showLoading();
            updateStatus('ƒêang l·∫•y d·ªØ li·ªáu t·ª´ xoso.com.vn...');
            
            fetch('/api/get_data', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    dataLoaded = true;
                    updateStatus('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!');
                    document.getElementById('dateSection').style.display = 'block';
                } else {
                    updateStatus('L·ªói khi l·∫•y d·ªØ li·ªáu: ' + data.message, 'error');
                }
            })
            .catch(error => {
                hideLoading();
                updateStatus('L·ªói k·∫øt n·ªëi: ' + error.message, 'error');
            });
        }
        
        function phanTichDuLieu() {
            if (!dataLoaded) {
                alert('Vui l√≤ng l·∫•y d·ªØ li·ªáu tr∆∞·ªõc!');
                return;
            }
            
            const targetDate = document.getElementById('targetDate').value;
            if (!targetDate) {
                alert('Vui l√≤ng ch·ªçn ng√†y ƒë·ªÉ soi c·∫ßu!');
                return;
            }
            
            showLoading();
            updateStatus('ƒêang ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi thu·∫≠t to√°n n√¢ng cao...');
            
            fetch('/api/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({date: targetDate})
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    updateStatus('Ph√¢n t√≠ch ho√†n th√†nh v·ªõi thu·∫≠t to√°n n√¢ng cao!');
                    displayResults(data.predictions);
                } else {
                    updateStatus('L·ªói khi ph√¢n t√≠ch: ' + data.message, 'error');
                }
            })
            .catch(error => {
                hideLoading();
                updateStatus('L·ªói k·∫øt n·ªëi: ' + error.message, 'error');
            });
        }
        
        function soiCauTheoNgay() {
            phanTichDuLieu();
        }
        
        function moXosoCom() {
            window.open('https://xoso.com.vn/xo-so-mien-bac/xsmb-p1.html', '_blank');
        }
        
        function displayResults(predictions) {
            document.getElementById('result').style.display = 'block';
            
            if (predictions.lo_de && predictions.lo_de.length > 0) {
                const lo = predictions.lo_de[0];
                document.getElementById('loResult').textContent = lo.split(' ')[0];
                document.getElementById('loDesc').textContent = lo.split(' ', 1)[1] || lo;
            }
            
            if (predictions.cap_xuyen && predictions.cap_xuyen.length > 0) {
                const cap = predictions.cap_xuyen[0];
                document.getElementById('capResult').textContent = cap.split(' ')[0];
                document.getElementById('capDesc').textContent = cap.split(' ', 1)[1] || cap;
            }
            
            document.getElementById('confidenceResult').textContent = predictions.confidence.toFixed(1) + '%';
            document.getElementById('confidenceDesc').textContent = 'D·ª± ƒëo√°n cho ng√†y: ' + predictions.date;
            
            let analysisContent = '';
            if (predictions.reasoning) {
                predictions.reasoning.forEach(reason => {
                    analysisContent += '<p>‚Ä¢ ' + reason + '</p>';
                });
            }
            analysisContent += '<p>‚Ä¢ ƒê·ªô tin c·∫≠y: ' + predictions.confidence.toFixed(1) + '% - ' + 
                (predictions.confidence >= 80 ? 'R·∫§T CAO' : predictions.confidence >= 60 ? 'CAO' : 'TRUNG B√åNH') + '</p>';
            analysisContent += '<p>‚Ä¢ Ngu·ªìn d·ªØ li·ªáu: K·∫øt qu·∫£ XSMB th·ª±c t·∫ø t·ª´ xoso.com.vn</p>';
            analysisContent += '<p>‚Ä¢ Thu·∫≠t to√°n: N√¢ng cao v·ªõi pattern th√¥ng minh</p>';
            
            if (predictions.analysis_summary) {
                analysisContent += '<p>‚Ä¢ T·ªïng s·ªë ph√¢n t√≠ch: ' + predictions.analysis_summary.total_numbers + '</p>';
                analysisContent += '<p>‚Ä¢ S·ªë n√≥ng t√¨m th·∫•y: ' + predictions.analysis_summary.hot_numbers_count + '</p>';
                analysisContent += '<p>‚Ä¢ C·∫∑p n√≥ng t√¨m th·∫•y: ' + predictions.analysis_summary.hot_pairs_count + '</p>';
            }
            
            document.getElementById('analysisContent').innerHTML = analysisContent;
        }
        
        function updateStatus(message, type = 'status') {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = 'Tr·∫°ng th√°i: ' + message;
            statusDiv.className = type;
        }
        
        function showLoading() {
            document.getElementById('loading').style.display = 'block';
        }
        
        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }
    </script>
</body>
</html>
    '''

@app.route('/api/get_data', methods=['POST'])
def api_get_data():
    """API l·∫•y d·ªØ li·ªáu"""
    try:
        success = get_xsmb_data_from_web()
        if success:
            return jsonify({
                'success': True,
                'message': 'D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng',
                'data_count': len(data_cache.get('xsmb_data', {}))
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ web'
            })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

@app.route('/api/analyze', methods=['POST'])
def api_analyze():
    """API ph√¢n t√≠ch d·ªØ li·ªáu"""
    try:
        data = request.get_json()
        target_date = data.get('date')
        
        if not target_date:
            return jsonify({
                'success': False,
                'message': 'Thi·∫øu th√¥ng tin ng√†y'
            })
        
        # Ph√¢n t√≠ch d·ªØ li·ªáu n√¢ng cao
        analysis = analyze_data_for_date_advanced(target_date)
        if not analysis:
            return jsonify({
                'success': False,
                'message': 'Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y n√†y'
            })
        
        # D·ª± ƒëo√°n n√¢ng cao
        predictions = predict_from_analysis_advanced(analysis, target_date)
        if not predictions:
            return jsonify({
                'success': False,
                'message': 'Kh√¥ng th·ªÉ t·∫°o d·ª± ƒëo√°n'
            })
        
        return jsonify({
            'success': True,
            'predictions': predictions,
            'analysis': analysis
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        })

if __name__ == '__main__':
    print("=" * 60)
    print("üéØ WEB APP XSMB CH√çNH X√ÅC CAO")
    print("=" * 60)
    print("üéØ THU·∫¨T TO√ÅN N√ÇNG CAO V·ªöI ƒê·ªò CH√çNH X√ÅC CAO")
    print("=" * 60)
    print("üåê ƒêang kh·ªüi ƒë·ªông web server...")
    print("üì± Truy c·∫≠p: http://localhost:5000")
    print("=" * 60)
    app.run(host='0.0.0.0', port=5000, debug=True)
