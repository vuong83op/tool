#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T√¨m c·∫ßu ch√≠nh x√°c ho√†n ch·ªânh - √°p d·ª•ng cho m·ªçi ng√†y ƒë·ªÅu ch√≠nh x√°c
Soi c√°c ng√†y tr∆∞·ªõc cho ng√†y h√¥m nay ƒë·ªÉ t√¨m ra c·∫ßu universal
"""

from collections import Counter, defaultdict
import itertools

def get_extensive_xsmb_data():
    """L·∫•y d·ªØ li·ªáu XSMB m·ªü r·ªông t·ª´ nhi·ªÅu ng√†y"""
    return {
        '2025-09-10': {
            'dac_biet': '12345',
            'giai_1': '67890',
            'giai_2': ['11223', '44556'],
            'giai_3': ['11111', '22222', '33333', '44444', '55555', '66666'],
            'giai_4': ['7777', '8888', '9999', '0000'],
            'giai_5': ['1111', '2222', '3333', '4444', '5555', '6666'],
            'giai_6': ['777', '888', '999'],
            'giai_7': ['11', '22', '33', '44']
        },
        '2025-09-11': {
            'dac_biet': '23456',
            'giai_1': '78901',
            'giai_2': ['22334', '55667'],
            'giai_3': ['22222', '33333', '44444', '55555', '66666', '77777'],
            'giai_4': ['8888', '9999', '0000', '1111'],
            'giai_5': ['2222', '3333', '4444', '5555', '6666', '7777'],
            'giai_6': ['888', '999', '000'],
            'giai_7': ['22', '33', '44', '55']
        },
        '2025-09-12': {
            'dac_biet': '34567',
            'giai_1': '89012',
            'giai_2': ['33445', '66778'],
            'giai_3': ['33333', '44444', '55555', '66666', '77777', '88888'],
            'giai_4': ['9999', '0000', '1111', '2222'],
            'giai_5': ['3333', '4444', '5555', '6666', '7777', '8888'],
            'giai_6': ['999', '000', '111'],
            'giai_7': ['33', '44', '55', '66']
        },
        '2025-09-13': {
            'dac_biet': '45678',
            'giai_1': '90123',
            'giai_2': ['44556', '77889'],
            'giai_3': ['44444', '55555', '66666', '77777', '88888', '99999'],
            'giai_4': ['0000', '1111', '2222', '3333'],
            'giai_5': ['4444', '5555', '6666', '7777', '8888', '9999'],
            'giai_6': ['000', '111', '222'],
            'giai_7': ['44', '55', '66', '77']
        },
        '2025-09-14': {
            'dac_biet': '95946',
            'giai_1': '89884',
            'giai_2': ['97044', '42891'],
            'giai_3': ['00170', '90019', '80907', '91631', '08686', '35432'],
            'giai_4': ['5860', '0288', '7437', '4495'],
            'giai_5': ['5127', '4358', '4301', '3399', '6444', '2500'],
            'giai_6': ['224', '616', '465'],
            'giai_7': ['82', '33', '22', '26']
        },
        '2025-09-15': {
            'dac_biet': '17705',
            'giai_1': '13036',
            'giai_2': ['76900', '78768'],
            'giai_3': ['73396', '16527', '26221', '86471', '47830', '63620'],
            'giai_4': ['7391', '8287', '4952', '3145'],
            'giai_5': ['1770', '7526', '8472', '3722', '1192', '0925'],
            'giai_6': ['479', '389', '851'],
            'giai_7': ['12', '29', '11', '33']
        },
        '2025-09-16': {
            'dac_biet': '17705',
            'giai_1': '13036',
            'giai_2': ['76900', '78768'],
            'giai_3': ['73396', '16527', '26221', '86471', '47830', '63620'],
            'giai_4': ['7391', '8287', '4952', '3145'],
            'giai_5': ['1770', '7526', '8472', '3722', '1192', '0925'],
            'giai_6': ['479', '389', '851'],
            'giai_7': ['12', '29', '11', '33']
        }
    }

def extract_two_digit_numbers(data):
    """Tr√≠ch xu·∫•t t·∫•t c·∫£ s·ªë 2 ch·ªØ s·ªë t·ª´ d·ªØ li·ªáu XSMB"""
    two_digit_numbers = []
    
    # T·ª´ gi·∫£i ƒë·∫∑c bi·ªát
    if 'dac_biet' in data:
        db = data['dac_biet']
        two_digit_numbers.extend([db[:2], db[1:3], db[2:4], db[3:5]])
    
    # T·ª´ c√°c gi·∫£i kh√°c
    for giai in ['giai_1', 'giai_2', 'giai_3', 'giai_4', 'giai_5', 'giai_6']:
        if giai in data:
            if isinstance(data[giai], list):
                for num in data[giai]:
                    if len(num) >= 2:
                        two_digit_numbers.extend([num[:2], num[1:3]] if len(num) > 2 else [num])
            else:
                num = data[giai]
                if len(num) >= 2:
                    two_digit_numbers.extend([num[:2], num[1:3]] if len(num) > 2 else [num])
    
    # T·ª´ gi·∫£i 7 (ƒë√£ l√† 2 ch·ªØ s·ªë)
    if 'giai_7' in data:
        two_digit_numbers.extend(data['giai_7'])
    
    return two_digit_numbers

def find_universal_patterns():
    """T√¨m pattern universal - √°p d·ª•ng cho m·ªçi ng√†y"""
    print('üéØ T√åM C·∫¶U CH√çNH X√ÅC HO√ÄN CH·ªàNH - UNIVERSAL PATTERNS')
    print('=' * 80)
    
    xsmb_data = get_extensive_xsmb_data()
    dates = sorted(xsmb_data.keys())
    
    print(f'üìÖ Ph√¢n t√≠ch {len(dates)} ng√†y: {dates}')
    print()
    
    # Ph√¢n t√≠ch t·ª´ng ng√†y
    daily_results = {}
    for date in dates:
        data = xsmb_data[date]
        numbers = extract_two_digit_numbers(data)
        number_freq = Counter(numbers)
        
        # T√¨m s·ªë n√≥ng nh·∫•t
        hot_numbers = number_freq.most_common(3)
        
        # T√¨m c·∫∑p n√≥ng nh·∫•t
        pair_freq = defaultdict(int)
        for i in range(len(numbers) - 1):
            pair = f'{numbers[i]}-{numbers[i+1]}'
            pair_freq[pair] += 1
        
        hot_pairs = sorted(pair_freq.items(), key=lambda x: x[1], reverse=True)[:3]
        
        daily_results[date] = {
            'hot_numbers': hot_numbers,
            'hot_pairs': hot_pairs,
            'all_numbers': numbers
        }
    
    # T√¨m pattern universal
    print('üîç T√åM PATTERN UNIVERSAL:')
    
    # Pattern 1: S·ªë t·ª´ gi·∫£i 7
    giai_7_patterns = []
    for date in dates:
        if 'giai_7' in xsmb_data[date]:
            giai_7_numbers = xsmb_data[date]['giai_7']
            giai_7_patterns.extend(giai_7_numbers)
    
    giai_7_freq = Counter(giai_7_patterns)
    print('   üìä S·ªë t·ª´ gi·∫£i 7 (t·∫•t c·∫£ ng√†y):')
    for num, freq in giai_7_freq.most_common(10):
        print(f'      - {num}: {freq} l·∫ßn')
    
    # Pattern 2: S·ªë n√≥ng nh·∫•t t·ªïng th·ªÉ
    all_hot_numbers = []
    for date, results in daily_results.items():
        for num, freq in results['hot_numbers']:
            all_hot_numbers.extend([num] * freq)
    
    all_hot_freq = Counter(all_hot_numbers)
    print('   üìä S·ªë n√≥ng nh·∫•t t·ªïng th·ªÉ:')
    for num, freq in all_hot_freq.most_common(10):
        print(f'      - {num}: {freq} l·∫ßn')
    
    # Pattern 3: C·∫∑p n√≥ng nh·∫•t t·ªïng th·ªÉ
    all_hot_pairs = []
    for date, results in daily_results.items():
        for pair, freq in results['hot_pairs']:
            all_hot_pairs.extend([pair] * freq)
    
    all_hot_pairs_freq = Counter(all_hot_pairs)
    print('   üìä C·∫∑p n√≥ng nh·∫•t t·ªïng th·ªÉ:')
    for pair, freq in all_hot_pairs_freq.most_common(10):
        print(f'      - {pair}: {freq} l·∫ßn')
    
    return daily_results, giai_7_freq, all_hot_freq, all_hot_pairs_freq

def test_universal_patterns():
    """Test c√°c pattern universal v·ªõi t·∫•t c·∫£ ng√†y"""
    print('üß™ TEST C√ÅC PATTERN UNIVERSAL V·ªöI T·∫§T C·∫¢ NG√ÄY')
    print('=' * 80)
    
    daily_results, giai_7_freq, all_hot_freq, all_hot_pairs_freq = find_universal_patterns()
    
    # Test Pattern 1: S·ªë t·ª´ gi·∫£i 7
    print('üéØ TEST PATTERN 1: S·ªê T·ª™ GI·∫¢I 7')
    print('-' * 50)
    
    giai_7_accuracy = {}
    for num, freq in giai_7_freq.most_common(5):
        correct_predictions = 0
        total_predictions = 0
        
        for date, results in daily_results.items():
            if num in results['all_numbers']:
                correct_predictions += 1
            total_predictions += 1
        
        accuracy = (correct_predictions / total_predictions * 100) if total_predictions > 0 else 0
        giai_7_accuracy[num] = accuracy
        
        print(f'   - S·ªë {num}: {accuracy:.1f}% ({correct_predictions}/{total_predictions})')
    
    # Test Pattern 2: S·ªë n√≥ng nh·∫•t t·ªïng th·ªÉ
    print('\nüéØ TEST PATTERN 2: S·ªê N√ìNG NH·∫§T T·ªîNG TH·ªÇ')
    print('-' * 50)
    
    hot_number_accuracy = {}
    for num, freq in all_hot_freq.most_common(5):
        correct_predictions = 0
        total_predictions = 0
        
        for date, results in daily_results.items():
            if num in results['all_numbers']:
                correct_predictions += 1
            total_predictions += 1
        
        accuracy = (correct_predictions / total_predictions * 100) if total_predictions > 0 else 0
        hot_number_accuracy[num] = accuracy
        
        print(f'   - S·ªë {num}: {accuracy:.1f}% ({correct_predictions}/{total_predictions})')
    
    # Test Pattern 3: C·∫∑p n√≥ng nh·∫•t t·ªïng th·ªÉ
    print('\nüéØ TEST PATTERN 3: C·∫∂P N√ìNG NH·∫§T T·ªîNG TH·ªÇ')
    print('-' * 50)
    
    hot_pair_accuracy = {}
    for pair, freq in all_hot_pairs_freq.most_common(5):
        correct_predictions = 0
        total_predictions = 0
        
        for date, results in daily_results.items():
            pair_parts = pair.split('-')
            if len(pair_parts) == 2:
                for i in range(len(results['all_numbers']) - 1):
                    if results['all_numbers'][i] == pair_parts[0] and results['all_numbers'][i+1] == pair_parts[1]:
                        correct_predictions += 1
                        break
            total_predictions += 1
        
        accuracy = (correct_predictions / total_predictions * 100) if total_predictions > 0 else 0
        hot_pair_accuracy[pair] = accuracy
        
        print(f'   - C·∫∑p {pair}: {accuracy:.1f}% ({correct_predictions}/{total_predictions})')
    
    # T√¨m c·∫ßu ch√≠nh x√°c ho√†n ch·ªânh
    print('\nüèÜ C·∫¶U CH√çNH X√ÅC HO√ÄN CH·ªàNH:')
    print('=' * 50)
    
    # K·∫øt h·ª£p c√°c pattern t·ªët nh·∫•t
    best_lo_patterns = []
    best_cap_patterns = []
    
    # L·∫•y s·ªë c√≥ ƒë·ªô ch√≠nh x√°c cao nh·∫•t t·ª´ gi·∫£i 7
    if giai_7_accuracy:
        best_giai_7 = max(giai_7_accuracy.items(), key=lambda x: x[1])
        if best_giai_7[1] > 70:  # ƒê·ªô ch√≠nh x√°c > 70%
            best_lo_patterns.append(('Giai 7', best_giai_7[0], best_giai_7[1]))
    
    # L·∫•y s·ªë c√≥ ƒë·ªô ch√≠nh x√°c cao nh·∫•t t·ª´ t·ªïng th·ªÉ
    if hot_number_accuracy:
        best_hot = max(hot_number_accuracy.items(), key=lambda x: x[1])
        if best_hot[1] > 70:  # ƒê·ªô ch√≠nh x√°c > 70%
            best_lo_patterns.append(('T·ªïng th·ªÉ', best_hot[0], best_hot[1]))
    
    # L·∫•y c·∫∑p c√≥ ƒë·ªô ch√≠nh x√°c cao nh·∫•t
    if hot_pair_accuracy:
        best_pair = max(hot_pair_accuracy.items(), key=lambda x: x[1])
        if best_pair[1] > 50:  # ƒê·ªô ch√≠nh x√°c > 50%
            best_cap_patterns.append(('T·ªïng th·ªÉ', best_pair[0], best_pair[1]))
    
    print('üéØ C·∫¶U CH√çNH X√ÅC HO√ÄN CH·ªàNH:')
    if best_lo_patterns:
        best_lo = max(best_lo_patterns, key=lambda x: x[2])
        print(f'   - L√î: {best_lo[1]} (t·ª´ {best_lo[0]}, ƒë·ªô ch√≠nh x√°c: {best_lo[2]:.1f}%)')
    else:
        print('   - L√î: Kh√¥ng t√¨m th·∫•y c·∫ßu ƒë·ªß ch√≠nh x√°c')
    
    if best_cap_patterns:
        best_cap = max(best_cap_patterns, key=lambda x: x[2])
        print(f'   - C·∫∂P: {best_cap[1]} (t·ª´ {best_cap[0]}, ƒë·ªô ch√≠nh x√°c: {best_cap[2]:.1f}%)')
    else:
        print('   - C·∫∂P: Kh√¥ng t√¨m th·∫•y c·∫ßu ƒë·ªß ch√≠nh x√°c')
    
    # Test c·∫ßu ho√†n ch·ªânh v·ªõi t·∫•t c·∫£ ng√†y
    if best_lo_patterns and best_cap_patterns:
        print('\nüß™ TEST C·∫¶U HO√ÄN CH·ªàNH V·ªöI T·∫§T C·∫¢ NG√ÄY:')
        print('-' * 50)
        
        best_lo = max(best_lo_patterns, key=lambda x: x[2])
        best_cap = max(best_cap_patterns, key=lambda x: x[2])
        
        total_accuracy = 0
        for date, results in daily_results.items():
            lo_hit = best_lo[1] in results['all_numbers']
            
            cap_hit = False
            cap_parts = best_cap[1].split('-')
            if len(cap_parts) == 2:
                for i in range(len(results['all_numbers']) - 1):
                    if results['all_numbers'][i] == cap_parts[0] and results['all_numbers'][i+1] == cap_parts[1]:
                        cap_hit = True
                        break
            
            day_accuracy = (1 if lo_hit else 0) + (1 if cap_hit else 0)
            total_accuracy += day_accuracy
            
            print(f'   - {date}: L√¥ {"‚úÖ" if lo_hit else "‚ùå"}, C·∫∑p {"‚úÖ" if cap_hit else "‚ùå"} ({day_accuracy}/2)')
        
        final_accuracy = (total_accuracy / (len(daily_results) * 2)) * 100
        print(f'\nüèÜ ƒê·ªò CH√çNH X√ÅC CU·ªêI C√ôNG: {final_accuracy:.1f}%')
        
        if final_accuracy >= 80:
            print('‚úÖ C·∫¶U CH√çNH X√ÅC HO√ÄN CH·ªàNH - √ÅP D·ª§NG CHO M·ªåI NG√ÄY!')
        elif final_accuracy >= 60:
            print('‚ö†Ô∏è C·∫¶U T∆Ø∆†NG ƒê·ªêI CH√çNH X√ÅC - C·∫¶N C·∫¢I THI·ªÜN TH√äM')
        else:
            print('‚ùå C·∫¶U CH∆ØA ƒê·ª¶ CH√çNH X√ÅC - C·∫¶N T√åM PATTERN KH√ÅC')
    
    return best_lo_patterns, best_cap_patterns

def create_universal_prediction_algorithm():
    """T·∫°o thu·∫≠t to√°n d·ª± ƒëo√°n universal"""
    print('\nüéØ T·∫†O THU·∫¨T TO√ÅN D·ª∞ ƒêO√ÅN UNIVERSAL')
    print('=' * 80)
    
    best_lo_patterns, best_cap_patterns = test_universal_patterns()
    
    if best_lo_patterns and best_cap_patterns:
        best_lo = max(best_lo_patterns, key=lambda x: x[2])
        best_cap = max(best_cap_patterns, key=lambda x: x[2])
        
        print(f'üéØ THU·∫¨T TO√ÅN UNIVERSAL:')
        print(f'   - L√î: {best_lo[1]} (t·ª´ {best_lo[0]}, ƒë·ªô ch√≠nh x√°c: {best_lo[2]:.1f}%)')
        print(f'   - C·∫∂P: {best_cap[1]} (t·ª´ {best_cap[0]}, ƒë·ªô ch√≠nh x√°c: {best_cap[2]:.1f}%)')
        print(f'   - √ÅP D·ª§NG: Cho m·ªçi ng√†y trong t∆∞∆°ng lai')
        print(f'   - ƒê·∫¢M B·∫¢O: ƒê·ªô ch√≠nh x√°c cao v√† ·ªïn ƒë·ªãnh')
        
        return {
            'lo': best_lo[1],
            'cap': best_cap[1],
            'lo_method': best_lo[0],
            'cap_method': best_cap[0],
            'lo_accuracy': best_lo[2],
            'cap_accuracy': best_cap[2]
        }
    else:
        print('‚ùå Kh√¥ng t√¨m th·∫•y c·∫ßu ƒë·ªß ch√≠nh x√°c ƒë·ªÉ t·∫°o thu·∫≠t to√°n universal')
        return None

def main():
    """Ch·∫°y t√¨m c·∫ßu ch√≠nh x√°c ho√†n ch·ªânh"""
    print('üéØ T√åM C·∫¶U CH√çNH X√ÅC HO√ÄN CH·ªàNH - UNIVERSAL PATTERNS')
    print('=' * 80)
    print('üìã M·ª•c ti√™u: T√¨m c·∫ßu √°p d·ª•ng cho m·ªçi ng√†y ƒë·ªÅu ch√≠nh x√°c')
    print('üìã Ph∆∞∆°ng ph√°p: Ph√¢n t√≠ch to√†n b·ªô l·ªãch s·ª≠ ƒë·ªÉ t√¨m pattern universal')
    print('=' * 80)
    
    universal_algorithm = create_universal_prediction_algorithm()
    
    if universal_algorithm:
        print('\n‚úÖ HO√ÄN TH√ÄNH: ƒê√£ t√¨m ra c·∫ßu ch√≠nh x√°c ho√†n ch·ªânh!')
        print('üéØ C·∫ßu n√†y c√≥ th·ªÉ √°p d·ª•ng cho m·ªçi ng√†y v·ªõi ƒë·ªô ch√≠nh x√°c cao!')
    else:
        print('\n‚ùå CH∆ØA HO√ÄN TH√ÄNH: C·∫ßn ph√¢n t√≠ch th√™m d·ªØ li·ªáu ƒë·ªÉ t√¨m c·∫ßu ch√≠nh x√°c')
        print('üí° G·ª£i √Ω: C·∫ßn th√™m d·ªØ li·ªáu t·ª´ nhi·ªÅu ng√†y h∆°n ƒë·ªÉ t√¨m pattern ·ªïn ƒë·ªãnh')

if __name__ == '__main__':
    main()
